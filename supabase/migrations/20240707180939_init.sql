create type "pricing_plan_interval" as enum ('day', 'week', 'month', 'year');

create type "pricing_type" as enum ('one_time', 'recurring');

create type "subscription_status" as enum ('trialing', 'active', 'canceled', 'incomplete', 'incomplete_expired', 'past_due', 'unpaid', 'paused');

create table "sys_users" (
    "id" uuid references auth.users not null primary key,
    "email" text,
    "phone" text,
    "full_name" text,
    "avatar_url" text,
    "billing_address" jsonb,
    "payment_method" jsonb,
    "created_at" timestamp with time zone default now(),
    "deleted_at" timestamp with time zone
);

alter table "sys_users" enable row level security;

create policy "Can view own user data." on sys_users for select using (auth.uid() = id);
create policy "Can update own user data." on sys_users for update using (auth.uid() = id);


create table "sys_faqs" (
    "id" uuid not null default gen_random_uuid() primary key,
    "title" text,
    "icon" text,
    "subtitle" text,
    "questions" jsonb[] not null default '{}'::jsonb[]
);


alter table "sys_faqs" enable row level security;

create table "sys_notifications" (
    "id" bigint generated by default as identity not null primary key,
    "title" text,
    "message" text,
    "read_at" timestamp with time zone,
    "action" jsonb default '{}'::jsonb,
    "user_id" uuid references sys_users not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "sys_notifications" enable row level security;

create table "sys_shortcuts" (
    "id" uuid not null default gen_random_uuid() primary key,
    "item" text,
    "user_id" uuid references sys_users not null
);


alter table "sys_shortcuts" enable row level security;

create table "stripe_customers" (
    "id" uuid not null default gen_random_uuid() primary key,
    "stripe_customer_id" text,
    "created_at" timestamp with time zone not null default now()
);


alter table "stripe_customers" enable row level security;

create table "stripe_products" (
    "id" text not null primary key,
    "active" boolean,
    "name" text,
    "description" text,
    "image" text,
    "metadata" jsonb,
    "marketing_features" jsonb[] default '{}'::jsonb[]
);


alter table "stripe_products" enable row level security;

create policy "Allow public read-only access." on stripe_products for select using (true);

create table "stripe_prices" (
    "id" text not null primary key,
    "product_id" text references stripe_products,
    "active" boolean,
    "description" text,
    "unit_amount" bigint,
    "currency" text,
    "type" pricing_type,
    "interval" pricing_plan_interval,
    "interval_count" integer,
    "trial_period_days" integer,
    "metadata" jsonb
);


alter table "stripe_prices" enable row level security;

create policy "Allow public read-only access." on stripe_prices for select using (true);

create table "stripe_subscriptions" (
    "id" text not null primary key,
    "user_id" uuid references sys_users not null,
    "status" subscription_status,
    "metadata" jsonb,
    "price_id" text references stripe_prices,
    "quantity" integer,
    "cancel_at_period_end" boolean,
    "created" timestamp with time zone not null default timezone('utc'::text, now()),
    "current_period_start" timestamp with time zone not null default timezone('utc'::text, now()),
    "current_period_end" timestamp with time zone not null default timezone('utc'::text, now()),
    "ended_at" timestamp with time zone default timezone('utc'::text, now()),
    "cancel_at" timestamp with time zone default timezone('utc'::text, now()),
    "canceled_at" timestamp with time zone default timezone('utc'::text, now()),
    "trial_start" timestamp with time zone default timezone('utc'::text, now()),
    "trial_end" timestamp with time zone default timezone('utc'::text, now())
);


alter table "stripe_subscriptions" enable row level security;

create policy "Can only view own subs data." on stripe_subscriptions for select using (auth.uid() = user_id);



